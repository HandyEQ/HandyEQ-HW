

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

ENTITY MAC_serial_implementation IS
  GENERIC(WIDTH:INTEGER:=16;
          N:INTEGER:=51);
  PORT(reset:STD_LOGIC;
       start:STD_LOGIC;
       clk:STD_LOGIC;
       x:IN STD_LOGIC_VECTOR(WIDTH-1 DOWNTO 0);
       y:OUT STD_LOGIC_VECTOR(2*WIDTH-1 DOWNTO 0);
--     y:OUT STD_LOGIC_VECTOR(WIDTH-1 DOWNTO 0);
       finished:OUT STD_LOGIC);
END MAC_serial_implementation;

ARCHITECTURE arch_MAC_serial_implementation OF MAC_serial_implementation IS
  TYPE SampleArray IS ARRAY (0 to N-1) OF STD_LOGIC_VECTOR(WIDTH-1 DOWNTO 0);
  TYPE CoffArray IS ARRAY (0 to N-1) OF STD_LOGIC_VECTOR(WIDTH-1 DOWNTO 0);
  
  SIGNAL x_sample:SampleArray;
  SIGNAL y_temp:STD_LOGIC_VECTOR(2*WIDTH-1 DOWNTO 0);
  SIGNAL start_EN:STD_LOGIC;
  SIGNAL tx:CoffArray;
  SIGNAL counter:INTEGER RANGE 0 TO N;
  
BEGIN
  clock:PROCESS(reset,clk)
  
  BEGIN
    IF reset = '1' THEN
      FOR i IN 0 TO N-1 LOOP
        x_sample(i) <= (OTHERS => '0');
      END LOOP;
      y <= (OTHERS => '0');
      finished <= '0';
      
--      tx(0)	<= "0000000000011000";
--      tx(1)	<= "0000000000001010";
--      tx(2)	<= "1111111111111001";
--      tx(3)	<= "1111111111100111";
--      tx(4)	<= "1111111111011000";
--      tx(5)	<= "1111111111010010";
--      tx(6)	<= "1111111111011000";
--      tx(7)	<= "1111111111101100";
--      tx(8)	<= "0000000000001100";
--      tx(9)	<= "0000000000110001";
--      tx(10)	<= "0000000001010010";
--      tx(11)	<= "0000000001100001";
--      tx(12)	<= "0000000001010111";
--      tx(13)	<= "0000000000101101";
--      tx(14)	<= "1111111111101011";
--      tx(15)	<= "1111111110011100";
--      tx(16)	<= "1111111101011001";
--      tx(17)	<= "1111111100111001";
--      tx(18)	<= "1111111101001111";
--      tx(19)	<= "1111111110100001";
--      tx(20)	<= "0000000000100011";
--      tx(21)	<= "0000000010111000";
--      tx(22)	<= "0000000100110111";
--      tx(23)	<= "0000000101110010";
--      tx(24)	<= "0000000101001010";
--      tx(25)	<= "0000000010110110";
--      tx(26)	<= "1111111111001110";
--      tx(27)	<= "1111111011000101";
--      tx(28)	<= "1111110111100100";
--      tx(29)	<= "1111110101111001";
--      tx(30)	<= "1111110110111000";
--      tx(31)	<= "1111111010110011";
--      tx(32)	<= "0000000001000001";
--      tx(33)	<= "0000001000001101";
--      tx(34)	<= "0000001110011001";
--      tx(35)	<= "0000010001100101";
--      tx(36)	<= "0000010000001101";
--      tx(37)	<= "0000001001101011";
--      tx(38)	<= "1111111110110011";
--      tx(39)	<= "1111110001101100";
--      tx(40)	<= "1111100101101000";
--      tx(41)	<= "1111011110011000";
--      tx(42)	<= "1111011111011000";
--      tx(43)	<= "1111101010111001";
--      tx(44)	<= "0000000001010110";
--      tx(45)	<= "0000100001000011";
--      tx(46)	<= "0001000110010010";
--      tx(47)	<= "0001101011110110";
--      tx(48)	<= "0010001100000011";
--      tx(49)	<= "0010100001110000";
--      tx(50)	<= "0010101001011010";
--      tx(51)	<= "0010100001110000";
--      tx(52)	<= "0010001100000011";
--      tx(53)	<= "0001101011110110";
--      tx(54)	<= "0001000110010010";
--      tx(55)	<= "0000100001000011";
--      tx(56)	<= "0000000001010110";
--      tx(57)	<= "1111101010111001";
--      tx(58)	<= "1111011111011000";
--      tx(59)	<= "1111011110011000";
--      tx(60)	<= "1111100101101000";
--      tx(61)	<= "1111110001101100";
--      tx(62)	<= "1111111110110011";
--      tx(63)	<= "0000001001101011";
--      tx(64)	<= "0000010000001101";
--      tx(65)	<= "0000010001100101";
--      tx(66)	<= "0000001110011001";
--      tx(67)	<= "0000001000001101";
--      tx(68)	<= "0000000001000001";
--      tx(69)	<= "1111111010110011";
--      tx(70)	<= "1111110110111000";
--      tx(71)	<= "1111110101111001";
--      tx(72)	<= "1111110111100100";
--      tx(73)	<= "1111111011000101";
--      tx(74)	<= "1111111111001110";
--      tx(75)	<= "0000000010110110";
--      tx(76)	<= "0000000101001010";
--      tx(77)	<= "0000000101110010";
--      tx(78)	<= "0000000100110111";
--      tx(79)	<= "0000000010111000";
--      tx(80)	<= "0000000000100011";
--      tx(81)	<= "1111111110100001";
--      tx(82)	<= "1111111101001111";
--      tx(83)	<= "1111111100111001";
--      tx(84)	<= "1111111101011001";
--      tx(85)	<= "1111111110011100";
--      tx(86)	<= "1111111111101011";
--      tx(87)	<= "0000000000101101";
--      tx(88)	<= "0000000001010111";
--      tx(89)	<= "0000000001100001";
--      tx(90)	<= "0000000001010010";
--      tx(91)	<= "0000000000110001";
--      tx(92)	<= "0000000000001100";
--      tx(93)	<= "1111111111101100";
--      tx(94)	<= "1111111111011000";
--      tx(95)	<= "1111111111010010";
--      tx(96)	<= "1111111111011000";
--      tx(97)	<= "1111111111100111";
--      tx(98)	<= "1111111111111001";
--      tx(99)	<= "0000000000001010";
--      tx(100)	<= "0000000000011000";

tx(0) <= "0000000001000010";
tx(1) <= "1000000000000001";
tx(2) <= "0111111110101011";
tx(3) <= "0000000000000000";
tx(4) <= "0000000010000111";
tx(5) <= "1000000000000001";
tx(6) <= "0111111100100000";
tx(7) <= "0000000000000000";
tx(8) <= "0000000101100111";
tx(9) <= "1000000000000001";
tx(10) <= "0111110111011000";
tx(11) <= "0000000000000000";
tx(12) <= "0000001100110011";
tx(13) <= "1000000000000001";
tx(14) <= "0111101101011110";
tx(15) <= "0000000000000000";
tx(16) <= "0000011010100111";
tx(17) <= "1000000000000001";
tx(18) <= "0111011001010000";
tx(19) <= "0000000000000000";
tx(20) <= "0000111011011001";
tx(21) <= "1000000000000001";
tx(22) <= "0110010110111110";
tx(23) <= "0000000000000000";
tx(24) <= "0101000100011100";
tx(25) <= "0111111111011111";
tx(26) <= "0101000100011100";
tx(27) <= "0000000000000000";
tx(28) <= "0110010110111110";
tx(29) <= "1000000000000001";
tx(30) <= "0000111011011001";
tx(31) <= "0000000000000000";
tx(32) <= "0111011001010000";
tx(33) <= "1000000000000001";
tx(34) <= "0000011010100111";
tx(35) <= "0000000000000000";
tx(36) <= "0111101101011110";
tx(37) <= "1000000000000001";
tx(38) <= "0000001100110011";
tx(39) <= "0000000000000000";
tx(40) <= "0111110111011000";
tx(41) <= "1000000000000001";
tx(42) <= "0000000101100111";
tx(43) <= "0000000000000000";
tx(44) <= "0111111100100000";
tx(45) <= "1000000000000001";
tx(46) <= "0000000010000111";
tx(47) <= "0000000000000000";
tx(48) <= "0111111110101011";
tx(49) <= "1000000000000001";
tx(50) <= "0000000001000010";
         
      start_EN <= '0';    
      
    ELSIF clk = '1' AND clk'EVENT THEN
      IF start = '1' AND start_EN = '0' THEN
        x_sample(0) <= x;
        FOR i IN 0 TO N-2 LOOP
          x_sample(i+1) <= x_sample(i);
        END LOOP;
      
        finished <= '0';
        start_EN <= '1';
        counter <= 0;
      END IF;
      
      IF  start_EN = '1' THEN
        IF counter = N THEN
          y <=  y_temp(2*WIDTH-2 DOWNTO 0)& '0'; --TO_STDLOGICVECTOR(TO_BITVECTOR(y_temp) SLL 1); 
          finished <= '1';
          start_EN <= '0';
        ELSE
          IF counter = 0 THEN
            y_temp <= STD_LOGIC_VECTOR(SIGNED(tx(counter)) * SIGNED(x_sample(counter)));
          ELSE
            y_temp <= STD_LOGIC_VECTOR(SIGNED(y_temp) + SIGNED(tx(counter)) * SIGNED(x_sample(counter)));
          END IF;         
          
          counter <= counter + 1;
        END IF;
      END IF;
    END IF;          
  END PROCESS clock; 
END arch_MAC_serial_implementation;